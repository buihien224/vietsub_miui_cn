#!/sbin/sh



umask 022

TMPDIR=/dev/tmp
PERSISTDIR=/sbin/.magisk/mirror/persist

rm -rf $TMPDIR 2>/dev/null
mkdir -p $TMPDIR

# Загрузка util_functions перед echo
ui_print() { echo "$1"; }

require_new_magisk() {
  
  ui_print "***************************************"
  exit 1
}

is_legacy_script() {
  unzip -l "$ZIPFILE" install.sh | grep -q install.sh
  return $?
}

print_modname() {
  local len
  len=`echo -n $MODNAME | wc -c`
  len=$((len + 2))
  local pounds=`printf "%${len}s" | tr ' ' '*'`
  ui_print "$pounds"
  ui_print "$MODNAME "
  ui_print "$pounds"
  ui_print "**********************************************************************"
  ui_print "Miui 12.5 Vietsub               "
  ui_print "$MODDES        "    
  ui_print "Telegram: @bhlnk     "
  ui_print "**********************************************************************"
}

on_install() {
  unzip -o "$ZIPFILE" 'system/*' -d $MODPATH >&2
}

set_permissions() {
  set_perm_recursive $MODPATH 0 0 0755 0644
}

##############
#Настройка среды
##############

OUTFD=$2
ZIPFILE=$3

mount /data 2>/dev/null

# Загрузить общие функции
[ -f /data/adb/magisk/util_functions.sh ] || require_new_magisk
. /data/adb/magisk/util_functions.sh
[ $MAGISK_VER_CODE -gt 18100 ] || require_new_magisk

# Подготовка zip для установки
setup_flashable

# Монтирование раздела
mount_partitions

# Проверка версии и архитектуры
api_level_arch_detect

# Установка busybox и бинарные файлы
$BOOTMODE && boot_actions || recovery_actions

##############
# Готово
##############

# Извлечь общедоступные файлы
unzip -o "$ZIPFILE" module.prop -d $TMPDIR >&2
[ ! -f $TMPDIR/module.prop ] && abort "! Не удалось извлечь файлы из архива!"

$BOOTMODE && MODDIRNAME=modules_update || MODDIRNAME=modules
MODULEROOT=$NVBASE/$MODDIRNAME
MODID=`grep_prop id $TMPDIR/module.prop`
MODPATH=$MODULEROOT/$MODID

MODNAME=`grep_prop name $TMPDIR/module.prop`
MODAUT=`grep_prop author $TMPDIR/module.prop`
MODDES=`grep_prop description $TMPDIR/module.prop`

# Создание пути к модулю
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

##########
# установка
##########

if is_legacy_script; then
  unzip -oj "$ZIPFILE" module.prop install.sh uninstall.sh 'common/*' -d $TMPDIR >&2

  # Загрузика установочного скрипт
  . $TMPDIR/install.sh

  # Название модуля
  print_modname
  on_install

  # Загрузить собственный сценарий удаления
  [ -f $TMPDIR/uninstall.sh ] && cp -af $TMPDIR/uninstall.sh $MODPATH/uninstall.sh

  # Размонтировать
  $SKIPMOUNT && touch $MODPATH/skip_mount

  # prop файл
  $PROPFILE && cp -af $TMPDIR/system.prop $MODPATH/system.prop

  # Информация о модуле
  cp -af $TMPDIR/module.prop $MODPATH/module.prop

  # post-fs-data Шаблон скрипта
  $POSTFSDATA && cp -af $TMPDIR/post-fs-data.sh $MODPATH/post-fs-data.sh

  # service Шаблон скрипта
  $LATESTARTSERVICE && cp -af $TMPDIR/service.sh $MODPATH/service.sh

  set_permissions
else
  print_modname

  unzip -o "$ZIPFILE" customize.sh -d $MODPATH >&2

  if ! grep -q '^SKIPUNZIP=1$' $MODPATH/customize.sh 2>/dev/null; then
    
    unzip -o "$ZIPFILE" -x 'META-INF/*' -d $MODPATH >&2

    # Разрешения по умолчанию
    set_perm_recursive $MODPATH 0 0 0755 0644
  fi

  # Загрузите сценарий настройки
  [ -f $MODPATH/customize.sh ] && . $MODPATH/customize.sh
fi

# Обработать папку замены
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch $NVBASE/modules/$MODID/update
  cp -af $MODPATH/module.prop $NVBASE/modules/$MODID/module.prop
fi

# Установите собственный патч sepolicy
if [ -f $MODPATH/sepolicy.rule -a -e $PERSISTDIR ]; then
  PERSISTMOD=$PERSISTDIR/magisk/$MODID
  mkdir -p $PERSISTMOD
  cp -af $MODPATH/sepolicy.rule $PERSISTMOD/sepolicy.rule
fi

# Удалить файл-заполнитель
rm -rf \
$MODPATH/system/placeholder $MODPATH/customize.sh \
$MODPATH/README.md $MODPATH/.git* 2>/dev/null

##############
#конец
##############

. $TMPDIR/uninstall.sh

cd /
$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR


exit 0